flips2
sum(flips2)
class(sum(flips2))
?rnorm
rnorm(10)
rnorm(10, mean=100, sd = 225)
rnorm(10, mean=100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
summary(my_pois)
dim(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d1 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d1)
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986, 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
as.Date(t4)
as.POSIXct(t4)
Sys.time() > 1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data("cars")
data(cars)
?cars
head(cars)
dim(cars)
names(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2
)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
library(kernlab)
library("kernlab")
install.packages("kernlab")
library("kernlab")
data(spam)
head(spam)
str(spam)
str(spam[,1:5])
trainSpam$type
set.seed(3435)
trainIndicator <- rbinom(4601, ssize = 1, prob = 0.5)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
trainSpam <- spam[trainIndicator == 0, ]
View(trainSpam)
str(spam)
summary(spam)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
View(testSpam)
log10(trainSpam[,1:4]+1)
plot(log10(trainSpam[,1:4]+1))
trainSpam$numType <- as.numeric(trainSpam$type)-1
View(trainSpam)
as.numeric(trainSpam$type)
costFunction <- function(x,y) sum(x!= (y>0.5))
costFunction()
cvError <- rep(NA, 55)
library("boot")
for (i in 1:55) {}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm (lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
?reformulate
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
print(lmFormula)
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
?glm
?cv.glm
?predict
dim(testSpam)
dim(testSpam)[1]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nospam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
predictionTest
head(predictionTest)
predictedSpam
predictionModel$fitted
str(predictionModel)
named(predictionModel)
names(predictionModel)
plot(1:length(predictionModel$fitted), predictionModel$fitted.values)
plot(1:length(predictionModel$fitted), predictionModel$fitted)
plot(trainSpam$numType, trainSpam$charDollar)
str(predictionTest)
head(predictionModel)
str(predictionTest)
str(predictionModel)
str(predictionModel$fitted)
str(predictionTest)
dim(testSpam)
str(testSpam$charDollar)
plot(1:length(predictionModel$fitted), predictionModel$fitted)
title: "Untitled"
)
Sys.info()
Sys.getenv()
memory.size()
memory.limit()
memory.profile()
Sys.getenv()
mem.limits()
print("Memory needs estimate:",memory_needs_MB)
print("Memory needs estimate:","memory_needs_MB")
paste("Memory needs estimate:",memory_needs_MB)
#Estimate memory needs. assuming 8 byte per value
memory_needs_MB = 2075259*9*8/1024/1024
memory_needs_MB = 2075259*9*8/(1024*1024)
paste("Memory needs estimate:",memory_needs_MB)
paste("Memory needs estimate:",memory_needs_MB)
paste("Memory needs estimate in MB:",memory_needs_MB)
format(memory_needs_MB, digits = 2)
format(memory_needs_MB, digits = 5)
format(memory_needs_MB, nsmall = 2)
paste("Memory needs estimate in MB:",signif(memory_needs_MB))
paste("Memory needs estimate in MB:",signif(memory_needs_MB, digits = 2))
?signif
paste("Memory needs estimate in MB:",round(memory_needs_MB, digits = 2))
print()
paste("Memory needs estimate in MB:",round(memory_needs_MB,2))
print()
paste("Memory needs estimate in MB:",round(memory_needs_MB,digits = 2))
paste("Memory needs estimate in MB:",round(memory_needs_MB,digits = 3))
paste("Memory needs estimate in MB:",round(memory_needs_MB,digits = 1))
paste("Memory needs estimate:",round(memory_needs_MB,digits = 1),"MB")
print("if more than 1GB, load with caution!")
?readLines
print(chosen)
dates_pattern="^(01|02)\/02\/2007"
dates_pattern="^(01|02)/02/2007"
?grep
chosen <-grepl(dates_pattern,linex)
print("chosen)
print(chosen)
}
close(con)
source('~/JHU-courses/Course-4-W1/ExData_Plotting1/plot1.R')
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
install.packages(xtable)
install.packages("xtable")
library("swirl")
swirl()
library("swirl")
swirl()
str(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
View(mydf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country,r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os <= "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, r_version != is.na(cran$r_version))
filter(cran, r_version == !is.na(cran$r_version))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na(cran$r_version))
filter(cran, r_version != is.na(cran$r_version))
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size / 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
n?
avg_bytes = mean(size))
?n
n_distinct()
?n_distinct()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library("swirl")
swirl()
library("tidyr")
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
View(students2)
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit
submit()
students3
submit()
?spread
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
students4
submit()
View(student_info)
submit()
View(students4)
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?select
submit()
?group_by
submit()
submit()
0
library(swirl)
swirl()
swirl()
submit()
?spread
reset()
View(students3)
submit()
0
exit
0
asda
ok
ok()
break
break()
exit()
submit()
submit()
?
?
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
this_day <- month()
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(tthis_moment)
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hours(), minutes= minutes())
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = hours(), minutes = minutes())
depart <- update(depart, hours = 17, minutes = 34
)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
0
library(swirl)
swirl()
library(swirl)
swirl()
View(students3)
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
library(swirl)
swirl()
library(data.table)
library(dplyr)
library(lattice)
getwd()
setwd("~/JHU-courses/Course-5-W2/RepData_PeerAssessment1")
unzip(zipfile="./activity.zip",exdir="./")
activity <- read.table(file="./activity.csv", header = TRUE, sep=",")
print(activity)
activity_clean <- group_by(activity, date)
activity_clean <- filter(activity_clean, !is.na(steps))
total_per_day <- summarize(activity_clean, total_steps = sum(steps))
mean(total_per_day$total_steps)
median(total_per_day$total_steps)
how_many_days <- length(total_per_day$total_steps)
hist(total_per_day$total_steps, xlab="steps per day", ylab="Frequency", breaks = how_many_days, col="blue", main="Histogram of the total number of steps taken each day")
## What is the average daily activity pattern?
activity_clean2 <- group_by(activity, interval)
activity_clean2 <- filter(activity_clean2, !is.na(steps))
avg_steps <-  summarize(activity_clean2, avg = mean(steps))
plot(avg_steps$interval, avg_steps$avg, type="l",
xlab = "5-min Step Interval", ylab = "Average Number of Steps", main = "The Average Daily Activity Pattern",  col ="blue")
avg_steps[which(avg_steps$avg==max(avg_steps$avg)),]
## Imputing missing values
# Calculate and report the total number of missing values in the dataset
# (the total number of rows with NAs)
print(nrow(activity)-nrow(activity_clean2))
#Not giving any extra steps to the statistics.
activity_clean3 <- activity
activity_clean3$steps[is.na(activity$steps)] = 0
activity_clean3 <- group_by(activity_clean3, date)
total_per_day3 <- summarize(activity_clean3, total_steps = sum(steps))
hist(total_per_day$total_steps, ylim=c(0,10.0), xlab="steps per day", ylab="Frequency", breaks = how_many_days, col="blue", main="Histogram of the total number of steps taken each day")
hist(total_per_day3$total_steps, ylim=c(0,10.0), xlab="steps per day", ylab="Frequency", breaks = how_many_days, col="blue", main="Histogram of the total number of steps taken each day")
mean(total_per_day3$total_steps)
median(total_per_day3$total_steps)
## Are there differences in activity patterns between weekdays and weekends?
#This system call doesn't have sufficient priviledges
#Sys.setenv(LANG = "en_US.UTF-8")
#Sys.setlocale("LC_TIME", "English")
activity_clean4 <- mutate(activity_clean3, WDAY = weekdays(as.Date(date)))
activity_clean4$DTYPE <-ifelse(!(activity_clean4$WDAY %in% c("Samstag","Sonntag")), "weekday", "weekend")
activity_clean4 <- group_by(activity_clean4, interval)
activity_wday <-  filter(activity_clean4, DTYPE == "weekday")
activity_wend <-  filter(activity_clean4, DTYPE == "weekend")
avg_wday <-  summarize(activity_wday, avg = mean(steps), DTYPE = "weekday")
avg_wend <-  summarize(activity_wend, avg = mean(steps), DTYPE = "weekend")
avg_week <- rbind(avg_wday, avg_wend)
xyplot(avg ~  interval | DTYPE, data = avg_week, layout = c(1,2), type ="l", ylab="Number of Steps")
